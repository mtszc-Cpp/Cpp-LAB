/*
W każdym zadaniu należy przetestować działanie funkcji - czyli np. użyć jej z poziomu
funkcji main().
1. Napisz funkcję o nazwie "autor", która wypisze na ekranie Twoje imię, nazwisko oraz
numer indeksu. Funkcja nie zwraca żadnej wartości.
2. Napisz funkcję o nazwie "dodaj", której argumentem wywołania są dwie liczby całkowite.
Funkcja zwraca sumę swoich argumentów.
3. Napisz funkcję zwracającą pole okręgu o zadanym jako argument wywołania promieniu.
5. Napisz funkcję pobierającą jako argumenty 2 liczby typu całkowitego, która je posortuje w
porządku rosnącym  wskazówka: przekaż zmienne przez referencję.
6. Napisz funkcję liczącą potęgę n liczby o podstawie x iteracyjnie.
7. Napisz funkcję zwracającą n-ty element ciągu Fibonacciego
8. Napisz funkcję, której argumentem wywołania jest liczba całkowita dodatnia. Funkcja
zwraca prawdę jeśli ta liczba jest liczbą pierwszą, fałsz - w przeciwnym wypadku.
9. Napisz funkcję obliczającą wartość liczby Eulera (e)
Wskazówka: e = 1/0! + 1/1! + 1/2! + 1/3! + 1/4! + ...
10. Napisz funkcję zwracającą NWD (największy wspólny dzielnik) dwóch liczb całkowitych
dodatnich.
-- DODATKOWO ---
11. Napisz funkcję której argumentem wywołania są współrzędne kartezjańskie punktu na
płaszczyźnie. Funkcja ma wyznaczyć i zwrócić współrzędne biegunowe
Wskazówka1:
http://pl.wikipedia.org/wiki/Uk%C5%82ad_wsp%C3%B3%C5%82rz%C4%99dnych_biegun
owych
Wskazówka2: dołącz do programu plik nagłówkowy <cmath>

UWAGA1 - proszę nie używać zmiennych globalnych !
UWAGA2 - proszę zadbać o czytelność programu (wcięcia bloków instrukcji) !
*/


#include <iostream>
#include <math.h>
#include <cmath>

using namespace std;


string autor(){
    return "Mateusz Cieciura, indeks 213877";
}


int dodaj(int a, int b){
    return a + b;
}


float poleOkregu(float r){
    return M_PI*pow(r,2);
}


int sortowanie (int a, int b){
    if (a<b){
        return a;
    }
    else{
        return b;
    }
}


long int potegowanie (int a, int b){
    if (b==0) return 1;
    else return a * potegowanie(a, b-1);
}


long int fibonacci(int n){
    if (n==1 || n==2) return 1;
    else return fibonacci(n-1)+fibonacci(n-2);
}


string liczbaPierwsza(int n){
    int counter = 0;
    for (int i=1; i < n; i++){
        if (n%i==0){
            counter ++;
        }
    }
    if (counter == 1) return "true";
    else return "false";
}

/* Nie poszło bo float?
float liczbaEulera(int n){
    return pow((1 + (1/n)),n);
}
*/

double liczbaEulera(int n)
{
    return pow((1+1.0/n), n);
}


int NWD(int a, int b){
    int nwd = 1;
    for(int i=1; i<=a; i++){
        if (a%i==0 & b%i==0){
            nwd = i;
            }
    }
    return nwd;
}

int wspolrzedneBiegunowe(int x, int y){
    int r = sqrt(pow(x,2)+pow(y,2));
    int kat = y/r;
    return asin(kat);


}


int main()
{
    cout << autor() << endl;
    cout << dodaj(2, 3) << endl;
    cout << poleOkregu(5) << endl;
    cout << sortowanie(3, 2) << endl;
    cout << potegowanie(2, 9) << endl;
    cout << fibonacci(20) << endl;
    cout << liczbaPierwsza(111) << endl;
    cout << liczbaEulera(50) << endl;
    cout << NWD(125, 5) << endl;
    cout << wspolrzedneBiegunowe(5, 5) << endl;

    return 0;
}
